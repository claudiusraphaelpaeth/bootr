#!/bin/bash -e
# set things up
find_dataset() {
  mount -t zfs | awk 'BEGIN { ret = 1; } $3 == mountpoint { print $1; ret = 0; exit; } END { exit ret; }' mountpoint="$1"
}

dir="$(dirname "$(readlink -f "$0")")"
dataset="$(find_dataset "$dir")" || { echo "could not find bootr\'s own dataset. are you sure it's at the root of a filesystem in your pool?"; exit 1; }
pool="$(cut -d/ -f1 <<< "$dataset")"
dataset_name="$(cut -d/ -f2- <<< "$dataset")"

efi="/boot/efi"
if ! mountpoint -q "$efi"; then
  echo "error: $efi is not a mountpoint" >&2
  exit 1
fi

echo "reading boot.cfg" >&2

[ -f "${dir}/boot.cfg" ] && source loadconfig || fresh=true

[ -z "${uuid}" ] && uuid="xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"

# regenerate boot.cfg
cat > boot.cfg <<EOF
# vim: ft=grub
set uuid="${uuid}"
EOF

echo "built boot.cfg" >&2

if [ -n "$fresh" ]; then
  echo "first run detected" >&2
  echo "generated base boot.cfg" >&2
  echo "exiting" >&2
  exit 0
fi

echo>&2
# write the config in the pool

echo "creating in-pool GRUB config" >&2

zfs list -Ho name,eu.nathan7:boot -r "${pool}" | awk -F '\t' 'tolower($2) == "true" {print $1}' | cut -d/ -f2- | while read dataset; do
  echo "adding boot entry $dataset" >&2
  cat <<EOF
menuentry "$dataset" {
  set root_fs=\${root_pool}/\${chosen}
  set root_path=/\${chosen}/@
  set boot_path=\${root_path}/boot
  source \${boot_path}/grub.cfg
}
EOF
done > grub.cfg
echo "built in-pool GRUB config" >&2

echo >&2

# set ourselves up in a temporary dir and start building our GRUB image
echo "building EFI GRUB image" >&2

tmp="$(mktemp -d)"
cd "$tmp"
mkdir -p boot/grub

cat >> boot/grub/grub.cfg <<EOF
# vim: ft=grub
set root_pool="${pool}"
set root_uuid="${uuid}"
set root_uuid_raw="$(sed "s/-//g" <<< "${uuid}")"
set timeout=0

if keystatus --shift; then
  set timeout=-1
fi

set gfxmode=auto
set gfxpayload=keep
set menu_color_normal=cyan/blue
set menu_color_highlight=blue/cyan

cryptomount -u \${root_uuid_raw}

if keystatus --shift; then
  set timeout=-1
fi

search --no-floppy --label --set \${root_pool}
source /${dataset_name}/@/grub.cfg
EOF

if command -v grub-mkstandalone > /dev/null; then
  grub_mkstandalone=grub-mkstandalone
elif command -v grub2-mkstandalone > /dev/null; then
  grub_mkstandalone=grub2-mkstandalone
else
  echo "can't find grub-mkstandalone" >&2
  exit 255
fi

mkdir -p "$efi/EFI/BOOT"
${grub_mkstandalone} -O x86_64-efi --modules='gfxterm gfxmenu efi_gop efi_uga font part_gpt part_msdos luks zfs' --locales='en@quot' --themes='' -o "$efi/EFI/BOOT/bootx64.efi" boot/grub/grub.cfg

rm -rf "$tmp"

echo "done" >&2
