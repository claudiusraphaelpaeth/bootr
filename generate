#!/bin/bash -e
# set things up
mount="$(dirname "$(readlink -f "$0")")"
cd "$mount"

echo "reading boot.cfg" >&2

[ -f "${mount}/boot.cfg" ] && source loadconfig || fresh=true

[ -z "${root_uuid}" ] && root_uuid="xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"
[ -z "${root_pool}" ] && root_pool="storage"

# regenerate boot.cfg
cat > boot.cfg <<EOF
# vim: ft=grub
set root_uuid="${root_uuid}"
set root_pool="${root_pool}"
EOF

echo "built boot.cfg" >&2

if [ -n "$fresh" ]; then
  echo "first run detected" >&2
  echo "generated base boot.cfg" >&2
  echo "exiting" >&2
  exit 0
fi

echo>&2
# write the config in the pool

echo "creating in-pool GRUB config" >&2

if zfs list "${root_pool}/grub" >/dev/null 2>&1; then
  echo "found GRUB filesystem" >&2
else
  zfs create "${root_pool}/grub"
  echo "created GRUB filesystem" >&2
fi

zfs list -Ho name,eu.nathan7:boot -r "${root_pool}" | awk -F '\t' 'tolower($2) == "true" {print $1}' | cut -d/ -f2- | while read dataset; do
  echo "adding boot entry $dataset" >&2
  cat <<EOF
menuentry "$dataset" {
  set root_fs=\${root_pool}/\${chosen}
  set root_path=/\${chosen}/@
  set boot_path=\${root_path}/boot
  source \${boot_path}/grub.cfg
}
EOF
done > "/${root_pool}/grub/grub.cfg"
echo "built in-pool GRUB config" >&2

echo >&2

# set ourselves up in a temporary dir and start building our GRUB image
echo "building EFI GRUB image" >&2

dir="$(mktemp -d)"
cd "$dir"
mkdir -p boot/grub

cat "$mount/boot.cfg" - >> boot/grub/grub.cfg <<EOF
# vim: ft=grub
set timeout=0

if keystatus --shift; then
  set timeout=-1
fi

set gfxmode=auto
set gfxpayload=keep
set menu_color_normal=cyan/blue
set menu_color_highlight=blue/cyan

cryptomount -a

if keystatus --shift; then
  set timeout=-1
fi

search --no-floppy --label --set \${root_pool}
source /grub/@/grub.cfg
EOF

if command -v grub-mkstandalone > /dev/null; then
  grub_mkstandalone=grub-mkstandalone
elif command -v grub2-mkstandalone > /dev/null; then
  grub_mkstandalone=grub2-mkstandalone
else
  echo "can't find grub-mkstandalone" >&2
  exit 255
fi

mkdir -p "$mount/EFI/BOOT"
${grub_mkstandalone} -O x86_64-efi --modules='gfxterm gfxmenu efi_gop efi_uga font part_gpt part_msdos luks zfs' --locales='en@quot' --themes='' -o "$mount/EFI/BOOT/bootx64.efi" boot/grub/grub.cfg

rm -rf "$dir"

echo "done" >&2
